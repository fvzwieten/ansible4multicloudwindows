---
# ============================================================= PLAY =====================================================
# run this on localhost without connection local
# to get access to the tower machine credential data
# create a dummy host in the in memory inventory and
# store the machine credentials as inventory vars
# these can then be retrieved across plays in this
# playbook.

- name: Retrieve admin credentials for Windows
  hosts: localhost
  gather_facts: no
  tasks:
  - name: add dummy host with machine credential in inventory
    add_host:
      name: "dummy"
      admin_username: "{{ansible_user}}"
      admin_password: "{{ansible_password}}"


# ============================================================= PLAY =====================================================
# switch to connection local to do Azure stuff
#

- name: Azure Create VM
  hosts: localhost
  connection: local
  
  var_files:
  - files/role_vars

  vars:
    winrm_enable_script: "Invoke-Expression -Command ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1')); Enable-WSManCredSSP -Role Server -Force"

    azure_resource_group: "ansible_workshop"
    azure_virtual_network: "vn_{{ azure_resource_group }}_01"
    azure_subnet: "sn_{{ azure_virtual_network }}"

  tasks:
  - name: Define OS type specific vars
    include_vars: "files/azure_vm_windows_vars"

  - name: Define Role specific ports
    set_fact:
      arm_ports: "{{ arm_ports }},{{ ports[role] }}"
      
  - name: create Azure resource group
    azure_rm_resourcegroup:
      name: '{{azure_resource_group}}'
      location: westeurope
      state: present
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10
    
  - name: create Azure virtual network in resource group
    azure_rm_virtualnetwork:
      name: '{{ azure_virtual_network }}'
      resource_group: '{{ azure_resource_group }}'
      address_prefixes_cidr:
      - 10.1.0.0/16
      state: present
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10
  
  - name: create Azure subnet in virtualnetwork
    azure_rm_subnet:
      name: '{{ azure_subnet }}'
      state: present
      virtual_network_name: '{{ azure_virtual_network }}'
      resource_group: '{{ azure_resource_group }}'
      address_prefix_cidr: 10.1.0.0/24
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10

  # use the credentials as stored in inventory host vars of the dummy host
  - name: Provision new Azure virtual host
    azure_rm_virtualmachine:
      admin_username: "{{ hostvars['dummy'].admin_username }}"
      admin_password: "{{ hostvars['dummy'].admin_password }}"
      os_type: 'Windows'
      image:
        offer: '{{ arm_offer }}'
        publisher: '{{ arm_publisher }}'
        sku: '{{ arm_sku }}'
        version: 'latest'
      name: '{{ vm_name }}'
      resource_group: '{{ azure_resource_group }}'
      state: present
      vm_size: '{{ arm_size }}'
      open_ports: '{{ arm_ports }}'
      virtual_network_name: '{{ azure_virtual_network }}'
      subnet_name: '{{ azure_subnet }}'
      tags:
          role: '{{ role }}'
    register: vm_result

  - name: Create Azure vm extension to enable HTTPS WinRM listener
    azure_rm_virtualmachineextension:
      name: winrm-extension
      resource_group: '{{ azure_resource_group }}'
      virtual_machine_name: '{{ vm_name }}'
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: "1.9"
      settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass {{winrm_enable_script}}"}'
      auto_upgrade_minor_version: true
 
  - name: Wait for the WinRM port to come online
    wait_for:
      port: 5986
      host: '{{azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress}}'
      timeout: 600
 
  - name: Get Public IP
    azure_rm_publicipaddress_facts:
      resource_group: '{{ azure_resource_group }}'
      name: '{{ vm_name }}01'
    register: azure_ip

  - name: Report endpoints
    debug:
      msg: "VM name: {{ vm_name }} Role: {{ role }} Public IP: {{ azure_ip.ansible_facts.azure_publicipaddresses[0].properties.ipAddress }}"
