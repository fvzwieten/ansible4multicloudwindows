---
- name: Retrieve admin credentials for Windows
  hosts: localhost
  gather_facts: no
  tasks:
  - name: add instance host with machine credential in inventory
    add_host:
      name: "instance"
      admin_username: "{{ansible_user}}"
      admin_password: "{{ansible_password}}"

  # the name of this playbook. You see this back in the default logging
- name: Azure Create VM
  hosts: localhost
  connection: local
  #vars_files:
    # here we include a var file from a sub directory "files"
  #- files/azure_vars
  
  # this is to specify vars as part of this playbook
  vars:
    # script to run inside the VM when windows VM has been provisioned (aka cloud-init) 
    winrm_enable_script: "Invoke-Expression -Command ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1')); Enable-WSManCredSSP -Role Server -Force"

    # Example of creating an array
    ports:
      webserver: "80"
      lbserver: "80,8080"
      dbserver: "3306"
      dcserver: "389,636,3268,3269,88,53,445,135,123,464,138,9389,139"

    #example to getting an element from an array
    role_ports: "{{ ports[role] }}"

    #vars neded for azure resource group
    #azure_resource_group: "ansible_workshop_{{ guid }}"
    azure_resource_group: "ansible_workshop"
    azure_virtual_network: "vn_{{ azure_resource_group }}_01"
    azure_subnet: "sn_{{ azure_virtual_network }}"

  # We now start the tasks that must be executed in order
  tasks:
  
  # the name of a task. You see this back in de default logging
  - name: Define OS type specific vars
  
    # An example of including a file whos name is dynamic
    include_vars: "files/azure_vm_windows_vars"

  # construct a var from multiple other vars
  - name: Define Role specific ports
    set_fact:
      arm_ports: "{{ arm_ports }},{{ ports[role] }}"
      
  # the retry logic of the following 3 tasks is that if this playbook is
  # run multiple times concurrently azure will try to create these objects
  # at exactly the same time because the present state is not there for all
  # of the instances. This produces errors. This is a common construct to prevent
  # mid-air collisions of these kinds.
  
  - name: create Azure resource group
    azure_rm_resourcegroup:
      name: '{{azure_resource_group}}'
      location: westeurope
      state: present
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10
    
  - name: create Azure virtual network in resource group
    azure_rm_virtualnetwork:
      name: '{{ azure_virtual_network }}'
      resource_group: '{{ azure_resource_group }}'
      address_prefixes_cidr:
      - 10.1.0.0/16
      state: present
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10
  
  - name: create Azure subnet in virtualnetwork
    azure_rm_subnet:
      name: '{{ azure_subnet }}'
      state: present
      virtual_network_name: '{{ azure_virtual_network }}'
      resource_group: '{{ azure_resource_group }}'
      address_prefix_cidr: 10.1.0.0/24
    register: arm_result
    until: arm_result.failed != True
    retries: 10
    delay: 10

  - name: Provision new Azure virtual host
    # Here we call the azure module to create a virtual machine.
    # It uses the provided machine credential to give it an initial local admin account
    azure_rm_virtualmachine:
      admin_username: "{{ hostvars['instance'].admin_username }}"
      admin_password: "{{ hostvars['instance'].admin_password }}"
      os_type: 'Windows'
      image:
        offer: '{{ arm_offer }}'
        publisher: '{{ arm_publisher }}'
        sku: '{{ arm_sku }}'
        version: 'latest'
      name: '{{ vm_name }}'
      resource_group: '{{ azure_resource_group }}'
      state: present
      vm_size: '{{ arm_size }}'
      open_ports: '{{ arm_ports }}'
      virtual_network_name: '{{ azure_virtual_network }}'
      subnet_name: '{{ azure_subnet }}'
      tags:
          role: '{{ role }}'
 
  # Because Ansible needs winrm we must add it
  - name: Create Azure vm extension to enable HTTPS WinRM listener
    azure_rm_virtualmachineextension:
      name: winrm-extension
      resource_group: '{{ azure_resource_group }}'
      virtual_machine_name: '{{ vm_name }}'
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: "1.9"
      settings: '{"commandToExecute": "powershell.exe -ExecutionPolicy ByPass {{winrm_enable_script}}"}'
      auto_upgrade_minor_version: true
 
  # Example of a way to wait before a resource comes online. Can also work with files on a machine.
  - name: Wait for the WinRM port to come online
    wait_for:
      port: 5986
      host: '{{azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress}}'
      timeout: 600
 
  # Get a fact from azure itself
  - name: Get Public IP
    azure_rm_publicipaddress_facts:
      resource_group: '{{ azure_resource_group }}'
      name: '{{ vm_name }}01'
    register: azure_ip

  # Use a debug statement to report on stuff in the logging
  - name: Report endpoints
    debug:
      msg: "VM name: {{ vm_name }} Role: {{ role }} Public IP: {{ azure_ip.ansible_facts.azure_publicipaddresses[0].properties.ipAddress }}"
